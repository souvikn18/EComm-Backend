import mongoose from "mongoose";
import authRoles from "../utils/authRoles.js"
import bcrypt from "bcryptjs"
import JWT from "jsonwebtoken"
import config from "../config/index.js";
import crypto from "crypto"

const userSchema = new mongoose.Schema( {
    name: {
        type: String,
        required: [true, "Name is required"],
        maxLength: [60, "Name should not exceed 60 chars"],
        trim: true,
    },
    email: {
        type: String,
        requided: [true, "Email is required"],
    },
    password: {
        type: String,
        requided:[true, "Password is required"],
        minLength: [8, "Password must be at least 8 chars"],
        select: false,
    },
    roles: {
        type: String,
        enum: Object.values(authRoles),
        default: authRoles.USER,
    },
    forgotPasswordToken: String,
    forgotPasswordExpiry: Date,
}, {timestamps: true} )

//Password encryption before saving
userSchema.pre("save", async function(next){
    if(!this.isModified("password")) return next()
    this.password = await bcrypt.hash(this.password, 10)
    next()
})

userSchema.methods = {
    //compare password
    comparePassword: async function(enteredPassword){
        return await bcrypt.compare(enteredPassword, this.password);
    },
    //generate JWT token
    getJWTtoken: function(){
        JWT.sign({_id: this._id, role: this.role}, config.JWT_SECRET, {
            expiresIn: config.JWT_EXPIRY
        })
    },
    //generate forgot password token
    generateaforgotaPasswordToken: function(){
        const forgotToken = crypto.randomBytes(20).toString("hex");

        //to encrypt the token generated by crypto
        this.forgotPasswordToken = crypto.createHash("sha256").update(forgotToken).digest("hex")

        //to ensure that the token doesn't expire
        this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000;

        return forgotToken;
    }
}

export default mongoose.model("User", userSchema)